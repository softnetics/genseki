// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

generator genseki {
  provider = "prisma-genseki-generator"
  output   = "../generated/genseki"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String  @id @default(uuid())
  name  String?
  image String?

  email         String?  @unique
  emailVerified Boolean? @default(false)

  posts         Post[]
  profile       Profile?
  comments      Comment[]
  accounts      Account[]
  sessions      Session[]
  verifications Verification[]

  phone         String?  @unique
  phoneVerified Boolean? @default(false)

  roles           String[]
  banned          Boolean   @default(false)
  bannedReason    String?
  bannedAt        DateTime?
  bannedExpiredAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Account {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  accountId String
  provider  String

  idToken      String?
  accessToken  String?
  refreshToken String?

  accessTokenExpiredAt  DateTime?
  refreshTokenExpiredAt DateTime?

  scope    String?
  password String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([userId, provider])
}

model Session {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  token String @unique

  ipAddress String?
  userAgent String?

  expiredAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Verification {
  id String @id @default(uuid())

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  value      String
  identifier String   @unique
  expiredAt  DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Profile {
  id  String  @id @default(uuid())
  bio String?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Post {
  id String @id @default(uuid())

  title     String
  content   Json
  published Boolean @default(false)

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  comments Comment[]
  postTags PostTag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model PostTag {
  id String @id @default(uuid())

  remark String?

  tagId String
  tag   Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Tag {
  id String @id @default(uuid())

  name String

  postTags PostTag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Comment {
  id String @id @default(uuid())

  content String

  postId String
  post   Post   @relation(fields: [postId], references: [id])

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
