import {
  DataType,
  type ModelConfig,
  type SanitizedModelSchema,
  type SanitizedModelShape,
  SchemaType,
  type Simplify,
} from '@genseki/react'

/**
 * Creates a sanitized model with the given shape and config.
 * @param {TShape} shape The shape of the model
 * @param {TConfig} config The configuration of the model
 * @returns {SanitizedModel<TShape>} A sanitized model containing the shape and config
 */
function model<const TShape extends SanitizedModelShape, const TConfig extends ModelConfig>(
  shape: TShape,
  config: TConfig
): SanitizedModelSchema<TShape, TConfig> {
  return { config, shape }
}

export const UserModel = model(
  {
    columns: {
      id: {
        schema: SchemaType.COLUMN,
        name: 'id',
        isId: true,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: true,
        dataType: DataType.STRING,
      },
      name: {
        schema: SchemaType.COLUMN,
        name: 'name',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: false,
        hasDefaultValue: false,
        dataType: DataType.STRING,
      },
      image: {
        schema: SchemaType.COLUMN,
        name: 'image',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: false,
        hasDefaultValue: false,
        dataType: DataType.STRING,
      },
      email: {
        schema: SchemaType.COLUMN,
        name: 'email',
        isId: false,
        isList: false,
        isUnique: true,
        isReadOnly: false,
        isRequired: false,
        hasDefaultValue: false,
        dataType: DataType.STRING,
      },
      emailVerified: {
        schema: SchemaType.COLUMN,
        name: 'emailVerified',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: false,
        hasDefaultValue: true,
        dataType: DataType.BOOLEAN,
      },
      phone: {
        schema: SchemaType.COLUMN,
        name: 'phone',
        isId: false,
        isList: false,
        isUnique: true,
        isReadOnly: false,
        isRequired: false,
        hasDefaultValue: false,
        dataType: DataType.STRING,
      },
      phoneVerified: {
        schema: SchemaType.COLUMN,
        name: 'phoneVerified',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: false,
        hasDefaultValue: true,
        dataType: DataType.BOOLEAN,
      },
      staffInfoId: {
        schema: SchemaType.COLUMN,
        name: 'staffInfoId',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: true,
        isRequired: false,
        hasDefaultValue: false,
        dataType: DataType.STRING,
      },
      roles: {
        schema: SchemaType.COLUMN,
        name: 'roles',
        isId: false,
        isList: true,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: false,
        dataType: DataType.STRING,
      },
      banned: {
        schema: SchemaType.COLUMN,
        name: 'banned',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: true,
        dataType: DataType.BOOLEAN,
      },
      bannedReason: {
        schema: SchemaType.COLUMN,
        name: 'bannedReason',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: false,
        hasDefaultValue: false,
        dataType: DataType.STRING,
      },
      bannedAt: {
        schema: SchemaType.COLUMN,
        name: 'bannedAt',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: false,
        hasDefaultValue: false,
        dataType: DataType.DATETIME,
      },
      bannedExpiredAt: {
        schema: SchemaType.COLUMN,
        name: 'bannedExpiredAt',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: false,
        hasDefaultValue: false,
        dataType: DataType.DATETIME,
      },
      createdAt: {
        schema: SchemaType.COLUMN,
        name: 'createdAt',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: true,
        dataType: DataType.DATETIME,
      },
      updatedAt: {
        schema: SchemaType.COLUMN,
        name: 'updatedAt',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: true,
        dataType: DataType.DATETIME,
      },
    },
    relations: {
      posts: {
        schema: SchemaType.RELATION,
        name: 'posts',
        isId: false,
        isList: true,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: false,
        relationName: 'PostToUser',
        referencedModel: 'post',
        relationToFields: [],
        relationFromFields: [],
        relationDataTypes: [DataType.STRING],
      },
      profile: {
        schema: SchemaType.RELATION,
        name: 'profile',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: false,
        hasDefaultValue: false,
        relationName: 'ProfileToUser',
        referencedModel: 'profile',
        relationToFields: [],
        relationFromFields: [],
        relationDataTypes: [DataType.STRING],
      },
      accounts: {
        schema: SchemaType.RELATION,
        name: 'accounts',
        isId: false,
        isList: true,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: false,
        relationName: 'AccountToUser',
        referencedModel: 'account',
        relationToFields: [],
        relationFromFields: [],
        relationDataTypes: [DataType.STRING],
      },
      sessions: {
        schema: SchemaType.RELATION,
        name: 'sessions',
        isId: false,
        isList: true,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: false,
        relationName: 'SessionToUser',
        referencedModel: 'session',
        relationToFields: [],
        relationFromFields: [],
        relationDataTypes: [DataType.STRING],
      },
      verifications: {
        schema: SchemaType.RELATION,
        name: 'verifications',
        isId: false,
        isList: true,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: false,
        relationName: 'UserToVerification',
        referencedModel: 'verification',
        relationToFields: [],
        relationFromFields: [],
        relationDataTypes: [DataType.STRING],
      },
      staffInfo: {
        schema: SchemaType.RELATION,
        name: 'staffInfo',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: false,
        hasDefaultValue: false,
        relationName: 'UserTostaffInfo',
        referencedModel: 'staffInfo',
        relationToFields: ['id'],
        relationFromFields: ['staffInfoId'],
        relationDataTypes: [DataType.STRING],
      },
    },
    primaryFields: ['id'],
    uniqueFields: [['id'], ['email'], ['phone']],
  },
  {
    name: 'UserModel',
    dbModelName: 'User',
    prismaModelName: 'user',
  }
)

export type UserModel = Simplify<typeof UserModel>

export const AccountModel = model(
  {
    columns: {
      id: {
        schema: SchemaType.COLUMN,
        name: 'id',
        isId: true,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: true,
        dataType: DataType.STRING,
      },
      userId: {
        schema: SchemaType.COLUMN,
        name: 'userId',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: true,
        isRequired: true,
        hasDefaultValue: false,
        dataType: DataType.STRING,
      },
      accountId: {
        schema: SchemaType.COLUMN,
        name: 'accountId',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: false,
        dataType: DataType.STRING,
      },
      provider: {
        schema: SchemaType.COLUMN,
        name: 'provider',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: false,
        dataType: DataType.STRING,
      },
      idToken: {
        schema: SchemaType.COLUMN,
        name: 'idToken',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: false,
        hasDefaultValue: false,
        dataType: DataType.STRING,
      },
      accessToken: {
        schema: SchemaType.COLUMN,
        name: 'accessToken',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: false,
        hasDefaultValue: false,
        dataType: DataType.STRING,
      },
      refreshToken: {
        schema: SchemaType.COLUMN,
        name: 'refreshToken',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: false,
        hasDefaultValue: false,
        dataType: DataType.STRING,
      },
      accessTokenExpiredAt: {
        schema: SchemaType.COLUMN,
        name: 'accessTokenExpiredAt',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: false,
        hasDefaultValue: false,
        dataType: DataType.DATETIME,
      },
      refreshTokenExpiredAt: {
        schema: SchemaType.COLUMN,
        name: 'refreshTokenExpiredAt',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: false,
        hasDefaultValue: false,
        dataType: DataType.DATETIME,
      },
      scope: {
        schema: SchemaType.COLUMN,
        name: 'scope',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: false,
        hasDefaultValue: false,
        dataType: DataType.STRING,
      },
      password: {
        schema: SchemaType.COLUMN,
        name: 'password',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: false,
        hasDefaultValue: false,
        dataType: DataType.STRING,
      },
      createdAt: {
        schema: SchemaType.COLUMN,
        name: 'createdAt',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: true,
        dataType: DataType.DATETIME,
      },
      updatedAt: {
        schema: SchemaType.COLUMN,
        name: 'updatedAt',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: true,
        dataType: DataType.DATETIME,
      },
    },
    relations: {
      user: {
        schema: SchemaType.RELATION,
        name: 'user',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: false,
        relationName: 'AccountToUser',
        referencedModel: 'user',
        relationToFields: ['id'],
        relationFromFields: ['userId'],
        relationDataTypes: [DataType.STRING],
      },
    },
    primaryFields: ['id'],
    uniqueFields: [['id'], ['userId', 'provider']],
  },
  {
    name: 'AccountModel',
    dbModelName: 'Account',
    prismaModelName: 'account',
  }
)

export type AccountModel = Simplify<typeof AccountModel>

export const SessionModel = model(
  {
    columns: {
      id: {
        schema: SchemaType.COLUMN,
        name: 'id',
        isId: true,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: true,
        dataType: DataType.STRING,
      },
      userId: {
        schema: SchemaType.COLUMN,
        name: 'userId',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: true,
        isRequired: true,
        hasDefaultValue: false,
        dataType: DataType.STRING,
      },
      token: {
        schema: SchemaType.COLUMN,
        name: 'token',
        isId: false,
        isList: false,
        isUnique: true,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: false,
        dataType: DataType.STRING,
      },
      ipAddress: {
        schema: SchemaType.COLUMN,
        name: 'ipAddress',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: false,
        hasDefaultValue: false,
        dataType: DataType.STRING,
      },
      userAgent: {
        schema: SchemaType.COLUMN,
        name: 'userAgent',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: false,
        hasDefaultValue: false,
        dataType: DataType.STRING,
      },
      expiredAt: {
        schema: SchemaType.COLUMN,
        name: 'expiredAt',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: false,
        dataType: DataType.DATETIME,
      },
      createdAt: {
        schema: SchemaType.COLUMN,
        name: 'createdAt',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: true,
        dataType: DataType.DATETIME,
      },
      updatedAt: {
        schema: SchemaType.COLUMN,
        name: 'updatedAt',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: true,
        dataType: DataType.DATETIME,
      },
    },
    relations: {
      user: {
        schema: SchemaType.RELATION,
        name: 'user',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: false,
        relationName: 'SessionToUser',
        referencedModel: 'user',
        relationToFields: ['id'],
        relationFromFields: ['userId'],
        relationDataTypes: [DataType.STRING],
      },
    },
    primaryFields: ['id'],
    uniqueFields: [['id'], ['token']],
  },
  {
    name: 'SessionModel',
    dbModelName: 'Session',
    prismaModelName: 'session',
  }
)

export type SessionModel = Simplify<typeof SessionModel>

export const VerificationModel = model(
  {
    columns: {
      id: {
        schema: SchemaType.COLUMN,
        name: 'id',
        isId: true,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: true,
        dataType: DataType.STRING,
      },
      userId: {
        schema: SchemaType.COLUMN,
        name: 'userId',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: true,
        isRequired: false,
        hasDefaultValue: false,
        dataType: DataType.STRING,
      },
      value: {
        schema: SchemaType.COLUMN,
        name: 'value',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: false,
        dataType: DataType.STRING,
      },
      identifier: {
        schema: SchemaType.COLUMN,
        name: 'identifier',
        isId: false,
        isList: false,
        isUnique: true,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: false,
        dataType: DataType.STRING,
      },
      expiredAt: {
        schema: SchemaType.COLUMN,
        name: 'expiredAt',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: false,
        dataType: DataType.DATETIME,
      },
      createdAt: {
        schema: SchemaType.COLUMN,
        name: 'createdAt',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: true,
        dataType: DataType.DATETIME,
      },
      updatedAt: {
        schema: SchemaType.COLUMN,
        name: 'updatedAt',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: true,
        dataType: DataType.DATETIME,
      },
    },
    relations: {
      user: {
        schema: SchemaType.RELATION,
        name: 'user',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: false,
        hasDefaultValue: false,
        relationName: 'UserToVerification',
        referencedModel: 'user',
        relationToFields: ['id'],
        relationFromFields: ['userId'],
        relationDataTypes: [DataType.STRING],
      },
    },
    primaryFields: ['id'],
    uniqueFields: [['id'], ['identifier']],
  },
  {
    name: 'VerificationModel',
    dbModelName: 'Verification',
    prismaModelName: 'verification',
  }
)

export type VerificationModel = Simplify<typeof VerificationModel>

export const ProfileModel = model(
  {
    columns: {
      id: {
        schema: SchemaType.COLUMN,
        name: 'id',
        isId: true,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: true,
        dataType: DataType.STRING,
      },
      bio: {
        schema: SchemaType.COLUMN,
        name: 'bio',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: false,
        hasDefaultValue: false,
        dataType: DataType.STRING,
      },
      userId: {
        schema: SchemaType.COLUMN,
        name: 'userId',
        isId: false,
        isList: false,
        isUnique: true,
        isReadOnly: true,
        isRequired: true,
        hasDefaultValue: false,
        dataType: DataType.STRING,
      },
      createdAt: {
        schema: SchemaType.COLUMN,
        name: 'createdAt',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: true,
        dataType: DataType.DATETIME,
      },
      updatedAt: {
        schema: SchemaType.COLUMN,
        name: 'updatedAt',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: true,
        dataType: DataType.DATETIME,
      },
    },
    relations: {
      user: {
        schema: SchemaType.RELATION,
        name: 'user',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: false,
        relationName: 'ProfileToUser',
        referencedModel: 'user',
        relationToFields: ['id'],
        relationFromFields: ['userId'],
        relationDataTypes: [DataType.STRING],
      },
    },
    primaryFields: ['id'],
    uniqueFields: [['id'], ['userId']],
  },
  {
    name: 'ProfileModel',
    dbModelName: 'Profile',
    prismaModelName: 'profile',
  }
)

export type ProfileModel = Simplify<typeof ProfileModel>

export const PostModel = model(
  {
    columns: {
      id: {
        schema: SchemaType.COLUMN,
        name: 'id',
        isId: true,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: true,
        dataType: DataType.STRING,
      },
      title: {
        schema: SchemaType.COLUMN,
        name: 'title',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: false,
        dataType: DataType.STRING,
      },
      content: {
        schema: SchemaType.COLUMN,
        name: 'content',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: false,
        dataType: DataType.JSON,
      },
      published: {
        schema: SchemaType.COLUMN,
        name: 'published',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: true,
        dataType: DataType.BOOLEAN,
      },
      authorId: {
        schema: SchemaType.COLUMN,
        name: 'authorId',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: true,
        isRequired: true,
        hasDefaultValue: false,
        dataType: DataType.STRING,
      },
      createdAt: {
        schema: SchemaType.COLUMN,
        name: 'createdAt',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: true,
        dataType: DataType.DATETIME,
      },
      updatedAt: {
        schema: SchemaType.COLUMN,
        name: 'updatedAt',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: true,
        dataType: DataType.DATETIME,
      },
    },
    relations: {
      author: {
        schema: SchemaType.RELATION,
        name: 'author',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: false,
        relationName: 'PostToUser',
        referencedModel: 'user',
        relationToFields: ['id'],
        relationFromFields: ['authorId'],
        relationDataTypes: [DataType.STRING],
      },
      tags: {
        schema: SchemaType.RELATION,
        name: 'tags',
        isId: false,
        isList: true,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: false,
        relationName: 'PostToTag',
        referencedModel: 'tag',
        relationToFields: [],
        relationFromFields: [],
        relationDataTypes: [DataType.STRING],
      },
    },
    primaryFields: ['id'],
    uniqueFields: [['id']],
  },
  {
    name: 'PostModel',
    dbModelName: 'Post',
    prismaModelName: 'post',
  }
)

export type PostModel = Simplify<typeof PostModel>

export const TagModel = model(
  {
    columns: {
      id: {
        schema: SchemaType.COLUMN,
        name: 'id',
        isId: true,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: true,
        dataType: DataType.STRING,
      },
      name: {
        schema: SchemaType.COLUMN,
        name: 'name',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: false,
        dataType: DataType.STRING,
      },
      order: {
        schema: SchemaType.COLUMN,
        name: 'order',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: false,
        dataType: DataType.STRING,
      },
      createdAt: {
        schema: SchemaType.COLUMN,
        name: 'createdAt',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: true,
        dataType: DataType.DATETIME,
      },
      updatedAt: {
        schema: SchemaType.COLUMN,
        name: 'updatedAt',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: true,
        dataType: DataType.DATETIME,
      },
      postId: {
        schema: SchemaType.COLUMN,
        name: 'postId',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: true,
        isRequired: false,
        hasDefaultValue: false,
        dataType: DataType.STRING,
      },
    },
    relations: {
      Post: {
        schema: SchemaType.RELATION,
        name: 'Post',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: false,
        hasDefaultValue: false,
        relationName: 'PostToTag',
        referencedModel: 'post',
        relationToFields: ['id'],
        relationFromFields: ['postId'],
        relationDataTypes: [DataType.STRING],
      },
    },
    primaryFields: ['id'],
    uniqueFields: [['id']],
  },
  {
    name: 'TagModel',
    dbModelName: 'Tag',
    prismaModelName: 'tag',
  }
)

export type TagModel = Simplify<typeof TagModel>

export const staffInfoModel = model(
  {
    columns: {
      id: {
        schema: SchemaType.COLUMN,
        name: 'id',
        isId: true,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: true,
        dataType: DataType.STRING,
      },
      position: {
        schema: SchemaType.COLUMN,
        name: 'position',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: false,
        dataType: DataType.STRING,
      },
      department: {
        schema: SchemaType.COLUMN,
        name: 'department',
        isId: false,
        isList: false,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: false,
        dataType: DataType.STRING,
      },
    },
    relations: {
      User: {
        schema: SchemaType.RELATION,
        name: 'User',
        isId: false,
        isList: true,
        isUnique: false,
        isReadOnly: false,
        isRequired: true,
        hasDefaultValue: false,
        relationName: 'UserTostaffInfo',
        referencedModel: 'user',
        relationToFields: [],
        relationFromFields: [],
        relationDataTypes: [DataType.STRING],
      },
    },
    primaryFields: ['id'],
    uniqueFields: [['id']],
  },
  {
    name: 'staffInfoModel',
    dbModelName: 'staffInfo',
    prismaModelName: 'staffInfo',
  }
)

export type staffInfoModel = Simplify<typeof staffInfoModel>

export const SanitizedFullModelSchemas = {
  user: UserModel,
  account: AccountModel,
  session: SessionModel,
  verification: VerificationModel,
  profile: ProfileModel,
  post: PostModel,
  tag: TagModel,
  staffInfo: staffInfoModel,
}

export type SanitizedFullModelSchemas = Simplify<typeof SanitizedFullModelSchemas>
